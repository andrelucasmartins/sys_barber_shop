// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Scheduling {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  date      DateTime
  createdAt DateTime @default(now())

  @@map("scheduling")
}

model Company {
  id           String   @id @default(cuid())
  userId       String
  memberId     String
  schedulingId Int
  companyName  String
  fantasyName  String
  cnpj         Int      @unique
  email        String   @unique
  address      String
  phoneNumber  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  member       Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  // scheduling Scheduling @relation(fields: [schedulingId], references: [id], onDelete: Cascade)

  @@map("company")
}

model User {
  id            String          @id @default(cuid())
  username      String?
  phoneNumber   String?
  email         String          @unique
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  profile       Profile[]
  Companie      Company[]
  role          UserRole        @default(USER)

  @@map("users")
}

model Profile {
  id     String  @id @default(cuid())
  userId String
  bio    String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Member {
  id         String    @id @default(cuid())
  userId     String
  username   String
  email      String    @unique
  birthday   DateTime
  occupation String    @unique
  Companie   Company[]

  @@map("members")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}
